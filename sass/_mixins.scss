// ------------------------------------------------------------
// Mixin for animations
// ------------------------------------------------------------
@mixin animation($prop) {
  -webkit-animation: $prop;
  -moz-animation: $prop;
  -o-animation: $prop;
  animation: $prop;
}
// Mixin for keyframes
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} { @content; }
  @-moz-keyframes #{$name} { @content; }
  @-ms-keyframes #{$name} { @content; }
  @keyframes #{$name} { @content; } 
}
// Create animation called 'check'
@include keyframes(check) {
  0% { height: 0; width: 0; }
  25% { height: 0; width: 15px; }
  50% { height: 27px; width: 15px; }
}
/* Create animation pushRight */
@include keyframes(rotateIcon) {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(180deg); }
}
// ------------------------------------------------------------



@mixin ellipsis() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin alpha-color($foreground-color, $property: 'background-color', $background-context-color: #fff) {
    #{$property}: mix( 
        fade-in($foreground-color, 1), 
        $background-context-color, 
        percentage(opacity($foreground-color)) 
    ); // Browsers without color opacity
    #{$property}: $foreground-color; // Decent browsers
    @if $property == 'background-color' {
        .lt-ie9 & { // IE8 has background filters; use them instead
            #{$property}: transparent;
            $ie-hex: ie-hex-str($foreground-color);
            filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#{$ie-hex},endColorstr=#{$ie-hex});
            zoom: 1;
        }
    }
}


// This mixin outputs a property with rem units and a px fallback.
// Values passed without units are used as multipliers for the final
// rem and px values, all other units are output without modification.
// $unit-default-px represents the root value of the document font-size
// in pixels.
//
// i.e. html { font-size: 100%;} // -> 16px
 
// Usage:
// @include px-and-rem([property], [multiplier | explicit value] [, ...]);
 
// Example 1:
//
// $unit-default-px: 16px;
//
// .margin { @include px-and-rem(margin, 2);}
//
// becomes
//
// .margin {
// 	margin: 32px;
// 	margin: 2rem;
// }
 
// Example 2:
//
$unit-default-px: 30px;
//
// .padding { @include px-and-rem(padding, 1, 2%, 1.5em);}
//
// becomes
//
// .padding {
// 	padding: 16px 2% 1.5em;
// 	padding: 1rem 2% 1.5em;
// }
 
@function fix8_unit_to_px($val) {
	@if unitless($val) {
		@if $val == 0 { @return $val}
		@else { @return ($val * $unit-default-px/2)};
	} @else { @return $val};
}
 
@function fix8_unit_to_rem($val) {
	@if unitless($val) {
		@if $val == 0 { @return $val}
		@else { @return $val+rem};
	} @else { @return $val};
}
 
@mixin px-and-rem($prop, $val...) {
	$n: length($val);
	$i: 1;
 
	$px-list: ();
	$rem-list: ();
 
	@while $i <= $n {
		$px-list: append($px-list, fix8_unit_to_px(nth($val, $i)));
		$rem-list: append($rem-list, fix8_unit_to_rem(nth($val, $i)));
		$i: $i + 1;
	}
 
	#{$prop}: $px-list;
	#{$prop}: $rem-list;
}